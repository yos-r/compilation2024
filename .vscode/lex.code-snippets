{
	"Lex file": {
		"prefix": "lex",
		//"body":"%option noyywrap %{#include<stdio.h> %} UL a* %%{UL} printf(); .* printf();%% int main(int argc, char *argv[]){++argv; --argc; if ( argc > 0 ) yyin = fopen( argv[0], 'r' ); else yyin = stdin; yylex();return 0;}"
		"body": [
			"%option noyywrap",
			"%{",
			"#include<stdio.h>",
			"#include <string.h>",
			"%}",
			"UL a*",
			"%%",
			"{UL} {printf(\"UL : %s reconnue\",yytext); }",
			".* printf(\"autre\");",
			"%%",
			"\/\/code c",
			"int main(int argc,char *argv[]){",
			"++argv; --argc;",
			"if ( argc > 0 ) yyin = fopen( argv[0], \"r\" ); \nelse yyin = stdin;",
			"yylex(); \nreturn 0; \n}"
		]
	}
	// Place your compilation2024 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}